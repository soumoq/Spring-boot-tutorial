package com.ecommerceApp.ecommerceApp.JavaBasicProgram.streamLamda;

import org.json.*;

import java.util.ArrayList;
import java.util.*;
import java.util.HashSet;
import java.util.List;
import java.util.function.Consumer;
import java.util.stream.Collectors;
import com.google.common.collect.MapDifference;
import com.google.common.collect.Maps;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import org.json.JSONException;
import org.json.JSONObject;

import java.lang.reflect.Type;
import java.util.*;

public class ConsumerExample {
    public static void main(String[] args) {
        String s1 = "[{\"claimEditsDisposition\": {\"processedValues\": [\"2\"], \"occurrence\": 1, \"description\": \"\", \"rawValue\": \"2\", \"returnCode\": 0, \"grouperOutputApiName\": \"ClaimEditsPfeDisposition\"}, \"claimUnderlyingSubsystemReturnCodeClaimId\": null, \"claimEditsClaimId\": \"6264\", \"claimEdits\": [{\"processedValues\": [\"25\"], \"occurrence\": 1, \"description\": \"Invalid ICD version qualifier; claim ignored, no event output\", \"rawValue\": \"25\", \"returnCode\": 0, \"grouperOutputApiName\": \"ClaimEditsPfe\"}, {\"processedValues\": [\"22\"], \"occurrence\": 1, \"description\": \"Invalid discharge date; claim ignored, no event output\", \"rawValue\": \"22\", \"returnCode\": 0, \"grouperOutputApiName\": \"ClaimEditsPfe\"}, {\"processedValues\": [\"28\"], \"occurrence\": 1, \"description\": \"Claim not within patient eligibility date range; claim ignored, no event output\", \"rawValue\": \"28\", \"returnCode\": 0, \"grouperOutputApiName\": \"ClaimEditsPfe\"}, {\"processedValues\": [\"23\"], \"occurrence\": 1, \"description\": \"Invalid line item date; line item ignored\", \"rawValue\": \"23\", \"returnCode\": 0, \"grouperOutputApiName\": \"ClaimEditsPfe\"}, {\"processedValues\": [\"24\"], \"occurrence\": 1, \"description\": \"All line items invalid or missing; all line items ignored, no event output\", \"rawValue\": \"24\", \"returnCode\": 0, \"grouperOutputApiName\": \"ClaimEditsPfe\"}], \"claimItemEdits\": [{\"processedValues\": [\"001:23\"], \"occurrence\": 1, \"description\": \"Invalid line item date; line item ignored\", \"rawValue\": \"001:23\", \"returnCode\": 0, \"grouperOutputApiName\": \"ClaimItemEditsPfe\"}], \"claimUnderlyingSubsystemReturnCode\": []}, {\"claimEditsDisposition\": {\"processedValues\": [\"2\"], \"occurrence\": 2, \"description\": \"\", \"rawValue\": \"2\", \"returnCode\": 0, \"grouperOutputApiName\": \"ClaimEditsPfeDisposition\"}, \"claimUnderlyingSubsystemReturnCodeClaimId\": null, \"claimEditsClaimId\": \"6240\", \"claimEdits\": [{\"processedValues\": [\"25\"], \"occurrence\": 2, \"description\": \"Invalid ICD version qualifier; claim ignored, no event output\", \"rawValue\": \"25\", \"returnCode\": 0, \"grouperOutputApiName\": \"ClaimEditsPfe\"}], \"claimItemEdits\": [], \"claimUnderlyingSubsystemReturnCode\": []}]";
        String s2= "[{\"claimEditsDisposition\": {\"processedValues\": [\"2\"], \"occurrence\": 1, \"description\": \"\", \"rawValue\": \"2\", \"returnCode\": 0, \"grouperOutputApiName\": \"ClaimEditsPfeDisposition\"}, \"claimUnderlyingSubsystemReturnCodeClaimId\": null, \"claimEditsClaimId\": \"6240\", \"claimEdits\": [{\"processedValues\": [\"25\"], \"occurrence\": 1, \"description\": \"Invalid ICD version qualifier; claim ignored, no event output\", \"rawValue\": \"25\", \"returnCode\": 0, \"grouperOutputApiName\": \"ClaimEditsPfe\"}], \"claimItemEdits\": [], \"claimUnderlyingSubsystemReturnCode\": []}, {\"claimEditsDisposition\": {\"processedValues\": [\"2\"], \"occurrence\": 2, \"description\": \"\", \"rawValue\": \"2\", \"returnCode\": 0, \"grouperOutputApiName\": \"ClaimEditsPfeDisposition\"}, \"claimUnderlyingSubsystemReturnCodeClaimId\": null, \"claimEditsClaimId\": \"6264\", \"claimEdits\": [{\"processedValues\": [\"25\"], \"occurrence\": 2, \"description\": \"Invalid ICD version qualifier; claim ignored, no event output\", \"rawValue\": \"25\", \"returnCode\": 0, \"grouperOutputApiName\": \"ClaimEditsPfe\"}, {\"processedValues\": [\"22\"], \"occurrence\": 2, \"description\": \"Invalid discharge date; claim ignored, no event output\", \"rawValue\": \"22\", \"returnCode\": 0, \"grouperOutputApiName\": \"ClaimEditsPfe\"}, {\"processedValues\": [\"28\"], \"occurrence\": 2, \"description\": \"Claim not within patient eligibility date range; claim ignored, no event output\", \"rawValue\": \"28\", \"returnCode\": 0, \"grouperOutputApiName\": \"ClaimEditsPfe\"}, {\"processedValues\": [\"23\"], \"occurrence\": 2, \"description\": \"Invalid line item date; line item ignored\", \"rawValue\": \"23\", \"returnCode\": 0, \"grouperOutputApiName\": \"ClaimEditsPfe\"}, {\"processedValues\": [\"24\"], \"occurrence\": 2, \"description\": \"All line items invalid or missing; all line items ignored, no event output\", \"rawValue\": \"24\", \"returnCode\": 0, \"grouperOutputApiName\": \"ClaimEditsPfe\"}], \"claimItemEdits\": [{\"processedValues\": [\"001:23\"], \"occurrence\": 2, \"description\": \"Invalid line item date; line item ignored\", \"rawValue\": \"001:23\", \"returnCode\": 0, \"grouperOutputApiName\": \"ClaimItemEditsPfe\"}], \"claimUnderlyingSubsystemReturnCode\": []}]";
        System.out.println(s1.replace("\\",""));
        System.out.println(s2.replace("\\",""));
        char[] chars = "abvaoqhfoqbboqwebgbwbgbwgbfwlefnew;nflwen;gwern;bnwr;ng;wnegnew;gnewng;.wn .;vbnwsvn sdn vsngnewnglewnflekwnjfkiekwlefnew;nflwen;gwern;bnwr;ng;wnegnew;gnewng;.wn .;vbnwsvn sdn vsngnewnglewnflekwnjfkiekwlefnew;nflwen;gwern;bnwr;ng;wnegnew;gnewng;.wn .;vbnwsvn sdn vsngnewnglewnflekwnjfkiekwlefnew;nflwen;gwern;bnwr;ng;wnegnew;gnewng;.wn .;vbnwsvn sdn vsngnewnglewnflekwnjfkiekwlefnew;nflwen;gwern;bnwr;ng;wnegnew;gnewng;.wn .;vbnwsvn sdn vsngnewnglewnflekwnjfkiekwlefnew;nflwen;gwern;bnwr;ng;wnegnew;gnewng;.wn .;vbnwsvn sdn vsngnewnglewnflekwnjfkiekwlefnew;nflwen;gwern;bnwr;ng;wnegnew;gnewng;.wn .;vbnwsvn sdn vsngnewnglewnflekwnjfkiekwlefnew;nflwen;gwern;bnwr;ng;wnegnew;gnewng;.wn .;vbnwsvn sdn vsngnewnglewnflekwnjfkiekwlefnew;nflwen;gwern;bnwr;ng;wnegnew;gnewng;.wn .;vbnwsvn sdn vsngnewnglewnflekwnjfkiekwlefnew;nflwen;gwern;bnwr;ng;wnegnew;gnewng;.wn .;vbnwsvn sdn vsngnewnglewnflekwnjfkiekwlefnew;nflwen;gwern;bnwr;ng;wnegnew;gnewng;.wn .;vbnwsvn sdn vsngnewnglewnflekwnjfkiekwlefnew;nflwen;gwern;bnwr;ng;wnegnew;gnewng;.wn .;vbnwsvn sdn vsngnewnglewnflekwnjfkiekwlefnew;nflwen;gwern;bnwr;ng;wnegnew;gnewng;.wn .;vbnwsvn sdn vsngnewnglewnflekwnjfkiekwlefnew;nflwen;gwern;bnwr;ng;wnegnew;gnewng;.wn .;vbnwsvn sdn vsngnewnglewnflekwnjfkiekwlefnew;nflwen;gwern;bnwr;ng;wnegnew;gnewng;.wn .;vbnwsvn sdn vsngnewnglewnflekwnjfkiekwlefnew;nflwen;gwern;bnwr;ng;wnegnew;gnewng;.wn .;vbnwsvn sdn vsngnewnglewnflekwnjfkiekwlefnew;nflwen;gwern;bnwr;ng;wnegnew;gnewng;.wn .;vbnwsvn sdn vsngnewnglewnflekwnjfkiekwlefnew;nflwen;gwern;bnwr;ng;wnegnew;gnewng;.wn .;vbnwsvn sdn vsngnewnglewnflekwnjfkiekwlefnew;nflwen;gwern;bnwr;ng;wnegnew;gnewng;.wn .;vbnwsvn sdn vsngnewnglewnflekwnjfkiekwlefnew;nflwen;gwern;bnwr;ng;wnegnew;gnewng;.wn .;vbnwsvn sdn vsngnewnglewnflekwnjfkiekwlefnew;nflwen;gwern;bnwr;ng;wnegnew;gnewng;.wn .;vbnwsvn sdn vsngnewnglewnflekwnjfkiekwlefnew;nflwen;gwern;bnwr;ng;wnegnew;gnewng;.wn .;vbnwsvn sdn vsngnewnglewnflekwnjfkiekwlefnew;nflwen;gwern;bnwr;ng;wnegnew;gnewng;.wn .;vbnwsvn sdn vsngnewnglewnflekwnjfkiekwlefnew;nflwen;gwern;bnwr;ng;wnegnew;gnewng;.wn .;vbnwsvn sdn vsngnewnglewnflekwnjfkiekwlefnew;nflwen;gwern;bnwr;ng;wnegnew;gnewng;.wn .;vbnwsvn sdn vsngnewnglewnflekwnjfkiekwlefnew;nflwen;gwern;bnwr;ng;wnegnew;gnewng;.wn .;vbnwsvn sdn vsngnewnglewnflekwnjfkiekwlefnew;nflwen;gwern;bnwr;ng;wnegnew;gnewng;.wn .;vbnwsvn sdn vsngnewnglewnflekwnjfkiek".toCharArray();
        Arrays.sort(chars);
        String c1 = new String(chars);
        System.out.println("sg: " + c1);
        //System.out.println(compareJson(s1.replace("\\",""), s2.replace("\\","")));

        List<Integer> i = Arrays.asList(1, 2, 3, 4, 5, 2);

        Consumer<Integer> consumer = new Consumer<Integer>() {
            @Override
            public void accept(Integer o) {
                System.out.println(o);
            }
        };
        i.forEach(i2 -> {
            System.out.println(i2);
        });

        String abc = "39075,39078,1000010150,81bf7a32-13dd-48c1-a8b9-9d392cec94b5,893f72c3-d778-40a2-8310-0f4ff38ded7c,b3bba897-2078-49a2-b755-b93efb97fd62,ce659998-fd1e-49f7-bea1-7c10be6333fc,39072,1000005118,4bd6c0c0-e7d4-427c-b8d9-fbc1fcf9a82b,1000010943,e30ec51a-d794-40b2-be0f-ae05bc4fec32,49673,8bebb49e-59f6-4c2b-a66b-7eae16a640b0,5630fde7-f994-42c7-b222-65d178415f9c,1000010941,1000010942,39069,5b49413f-244e-408d-b79d-16b9393c6365,7864f20f-6340-4751-a430-478a9ea87fa5,5acf9fde-288e-4c93-ac94-56ab14930f45,7584a644-cde9-4798-8d47-12a253d1d76d,15c6180b-de2b-436d-8927-ccab9b4a6ff1,1000007771,d8d3e54d-d000-4fbf-8ad2-d6b9aa6245f7,7a4f876c-5da3-42e7-8c9d-efc8401955f4,98f697e9-f4bb-42eb-91f7-8073f0beea3e,42a1c325-afbd-4f46-9dfa-d28fecc87013,1561cf78-5bae-4ca6-bef3-51f2e44d8d09,be734862-6a3a-4ffe-b657-0034eec51b15,8bdbd0eb-233a-402e-b5e7-43aa1a3f5895,117fb064-3eeb-40df-b22b-1266610647cb,1000000207,ba6adecc-7e94-4bbb-8d16-8345d3f11c1b,8c0ff71a-705f-4485-b1db-bea3ed652859,db5d19a4-68c7-4465-83f1-119a097e6a66,10755,10758,3499be5d-5a91-407e-9078-5ad3ffe561d6,d34809f6-3e8f-4533-bed7-e039fa2a8635,4da9e09d-7742-4d6a-9c9c-403290fdcfde,0498ddbf-8f84-4cc4-8076-fa02d61b8202,10752,22745,a40dac17-e71e-4021-8360-7ad8de1e8364,ece48702-b84d-4f1c-b3f3-71bce79dd787,302ade26-2d89-4ca4-b45e-2d46fb1d4fa5,89449653-7cbf-47d1-9547-2445212d586f,c764402b-9d33-411f-8609-2349f8c9760a,49763,a61273f1-a4ac-49de-8080-595cdc25d264,10761,d7124ab9-6e79-439c-b017-73fa0f7f81a2,1a8162a8-32eb-4005-ae4d-964fd76315ab,53cd2512-0e19-4c22-809b-c0d01d08e3bb,f846b600-7703-4119-994a-aa271be92009,10764,2f9db83a-0d55-4cdb-92c3-7b955f83a2ce,1000004904,49755,ab5a110e-202b-4a5e-9ef0-1fcfdae9ccd4,81a29621-38e7-4117-bcbe-80c5a05d906c,1000004906,2e66457e-4afe-4f9a-9b72-510d0f655fc5,10734,bcde8fc8-353b-43de-b0a8-a31f2d21fe4b,4dc9b5c1-e0a2-4555-b0b1-9e2326d67761,10737,1b3accfc-30b1-41a2-befe-dc0d03b95617,1000016568,1000016325,1000013612,10731,a4de3835-8b49-47e6-abb7-3d338f690769,a55381e8-1a44-48a3-ac75-e5a56c4bd313,70cccd2f-1bc8-4745-8156-a770af23ea6f,8bd7e9c1-ab3b-48ed-ac75-43b585b8e48b,1000001742,1000013607,1000007730,10746,26165724-b857-4f45-9a57-c50ab5dfcacb,10749,7c4f4239-8ed9-46ea-b5c8-e06013c5e19e,13b94cf0-e1a7-49f7-852d-2eda5300b48a,6266a3f8-2496-4076-b66c-c66d926b8e12,10740,fda3f10f-666a-4524-be16-d40ddc783440,1000013722,10743,1cae445e-85a9-4a51-9c0e-9eb6840c6c89,aca7528b-e61d-4ede-bcd8-6c2cd7ef4c05,fa6c9df3-4047-47cb-b2e1-f219fe28d27e,46ced242-8103-44ee-b416-1b222debff5c,bf6a6200-bd5e-4a5d-b221-8b493cc83d15,1000007961,60a8bd78-a5d8-4965-a3a8-eb6a8d332f82,d4952770-4beb-489b-b222-4bb98e016d77,9b416b7a-72e3-4c23-8b97-d4ed300e5e00,9d017703-a19a-47a5-8890-23924e34e250,22824,ab8d1610-a21c-444f-9b20-10492cc1bbf3,2da29296-11c5-4444-9517-cf447ffe4c40,2663333e-8a9b-4478-bf71-502bae05c63c,1000005647,004aa34d-751a-4da0-8293-9947171ce721,6dbbc217-1cd3-4e0d-a66b-164fd15773db,9cef8529-4e66-4ae8-838b-23ee1b4e3e74,35466a32-9a30-4c14-b533-b5a5c2e2d5ae,10728,1000014116,cd8c2a71-4bb3-48ca-8f64-39aba9e163ee,d4989ec0-216d-4516-ac43-df9e543b4d72,1000001956,15e1e572-caf9-4681-a6d2-7ce118d0296d,85682308-9ae0-4ead-921a-f01f1ad71ded,36881,47141bd6-a875-4247-a041-8bc27cd50397,1000001955,4bbf2b13-44ce-4f20-bd79-9ce736c70074,5f740ee1-4dfe-4ffc-a1f3-e9c6d7e418ea,1000007820,deeefc0c-5fb6-49aa-b2c7-f3d0ed7353bf,29664,12d8cfe1-2bf2-491d-8c59-d46c543cbadb,1000008233,5d7f5fa4-fc21-4db3-b61e-2c9f32d502fd,55bf9fa4-5500-48a6-ad8f-5cbea2c543ba,6a6d941e-8201-430f-a1a4-651bfcf3d06b,22909,16914,6b2535d6-4143-4b87-a64b-2b921b21c16f,16911,1000000856,1000000857,99f3dbf5-6391-4a7d-b415-2aa287befa1c,3f917f45-2abb-431a-b5b7-d7b7e1f2c1c5,43607,df18d991-c019-4df6-93ea-d0bddcdad022,a1c7b761-3985-4976-9c3c-81ac85403c07,f35e9569-f7a4-4742-a69c-62e708341e4f,16920,4bf1be59-1134-4945-9700-b221ca429065,36878,1737c989-1bbe-414b-a0bf-543c3870f0d6,9f379eaf-f740-4b7c-b458-4fd131923721,56c5bda4-68ab-40a2-ac17-36d8567218de,aae3ef7b-24b3-46e4-9d66-a80ad02cf375,7322d08b-00b4-43b3-8ac3-4088ed4b4f89,93851f4e-482d-465f-bc7a-134e922919b3,ea293290-dcef-4934-b2b8-5394034daf04,1000001497,1000001259,46d3506e-b02c-434d-b0a9-1ba9ca6bae6b,e62189f1-dcbe-481a-943b-093a3d55b686,d8cb7500-fc26-4d97-a679-6f597fd11454,1000011057,72f07896-3198-4950-ab93-42799858df2f,93604c61-3fa9-4a47-8502-82efcc323a6f,1000011058,2dc2b604-ed14-4def-9d0f-b07e11634505,8315f8a4-61b7-4f0c-b3de-a6e382efa58e,48ed3264-7be6-4b7d-a6c7-3e95ea5e1394,688163d9-730f-49ac-8ad6-e588db9e0a30,59ba6efd-5fc4-4460-a02b-1bbdbbe0c4ed,bf0270b3-7661-4a8c-b53a-22f8840512e7,16905,e1808b58-0403-4a6f-aa29-a9cd3900a28a,16908,76c62599-35fd-4420-95f9-9da6e4018653,d99235a3-6812-4f14-9ab7-105c57e4e4aa,16902,57f90ec8-9448-485a-96a8-157311da19a8,58801294-398b-4e86-97f8-076f67df01b3,f082660a-6eab-433c-b899-d4805a83e51c,dcaea5e1-43c7-421a-8d4a-22396449f6f8,27324,1000003660,72596226-944a-46fb-9055-4b5fbff95d79,1000010989,51796650-b51d-4363-87c2-16507c0a294c,07bd3eaa-c9d1-43da-9e59-f1a0e88b32a6,9a6fe7f3-4840-4892-9194-fff3ceaf9a35,1000006491,daed5897-afd5-41b8-9e20-5a7108009ee2,1000006490,fc7da491-df0a-4a92-8764-ba4d230e309c,1000006493,1000006492,956a1839-4f5a-44a7-bec3-80ee00ce52b0,d4bc9b8c-93e3-4567-8fda-6008211cef78,bf07e4c2-1469-4d80-af9c-3ea85fe8b63b,22443,34eafa1b-6dbd-4aae-8429-32cf248b1f21,1000006488,1000006487,1000006489,28422,1000006484,1000006483,1000006486,76b08cef-2624-46de-af24-68eb0c007469,1000006485,dd6f3dcd-5421-4536-8214-cb9280a6115d,1000006480,1000013687,1000006482,1000009196,1000006481,1000013686,120856e0-51db-45fb-a9e2-b2b7703b8c32,1000009195,698825e2-19ec-4e0c-9a20-9f251ae1aafb,fa71a9fc-3272-4fca-b8f6-70481f4eecc9,51617,b840847a-dd13-49f8-8ded-1a9b468aec95,7cbada96-0fcf-46a2-b1a7-a8e8a088fbc0,16893,938a42d7-cc5a-496f-a4f1-e79a1bd5c83f,cea0aeed-11e1-44e3-8587-602a3bf39d78,61b7f525-3580-4ab5-93a8-533af566a55b,1000003515,1000006477,1000006476,95ec4690-29fc-46fa-b44a-1c1d7ca1e32a,1000006479,1000006478,29ed0234-3c3e-453b-8fd5-b1e2d4502fd4,1000006475,1000006474,16899,cb61790b-c86a-4dd3-9a4b-126b1e87767f,16896,2999a9bc-9f2b-43ca-a1ad-e6b942dd2cee,93d4af0d-9b56-436a-9db7-0eaf14bba959,92dde998-5356-42f0-ada5-1c6a690c42c3,1000011130,86c572e1-ade4-4ba0-9b7d-a16394bf094c,1eaf6f07-3e2c-4d08-b970-a59d4e99698a,4f9dd9b4-f730-48fb-948e-1dbf693e7f03,20227cd4-af2b-4666-8892-8af1d7147955,c2fd7d15-7ef0-456e-8e26-4ab3f5dfb715,582e16f2-29c6-402a-81c7-dcbfc01955b8,d9f34748-4bab-45d8-a249-1a89bfb9c4d4,ff059dc5-171e-4ba5-b526-7270ab581b00,1000005131,86f678f8-004a-4fdc-9f13-7af3faaa0389,41f25f71-1ca4-4cc5-8aee-d98587d0d098,93fefa97-fdf5-4415-aa61-02b407b7b0c2,f7921982-7377-4da4-b413-509402350a18,a880438e-7210-454e-ab6b-11c59b146791,f2771d4e-ad8a-4c52-8a9b-119afffe5e2a,9005646f-6ff2-4ce8-9b0c-665beaec8626,7a7d4203-becf-49f8-bdcb-82f2224305ec,356eeb02-0ab1-498f-b65d-abfb2f7e220c,12454e52-983a-44d6-a705-3785d46c49a5,abe91bac-3fa4-488c-9ec6-47353b7f7339,420b3954-cb42-4643-aca3-df53cf8e6107";
        String bca = "16896,1000007820,1000009195,61b7f525-3580-4ab5-93a8-533af566a55b,a880438e-7210-454e-ab6b-11c59b146791,16920,10761,51617,28422,1000000856,1000000857,9f379eaf-f740-4b7c-b458-4fd131923721,b3bba897-2078-49a2-b755-b93efb97fd62,4bf1be59-1134-4945-9700-b221ca429065,41f25f71-1ca4-4cc5-8aee-d98587d0d098,12454e52-983a-44d6-a705-3785d46c49a5,22909,29664,49763,1000007730,1561cf78-5bae-4ca6-bef3-51f2e44d8d09,d4989ec0-216d-4516-ac43-df9e543b4d72,1000005647,55bf9fa4-5500-48a6-ad8f-5cbea2c543ba,1000008233,1000005131,dd6f3dcd-5421-4536-8214-cb9280a6115d,93fefa97-fdf5-4415-aa61-02b407b7b0c2,70cccd2f-1bc8-4745-8156-a770af23ea6f,cea0aeed-11e1-44e3-8587-602a3bf39d78,49755,1000007771,1a8162a8-32eb-4005-ae4d-964fd76315ab,1000007961,49673,1000016568,2dc2b604-ed14-4def-9d0f-b07e11634505,1000016325,6266a3f8-2496-4076-b66c-c66d926b8e12,1000011130,356eeb02-0ab1-498f-b65d-abfb2f7e220c,1000013722,16914,16902,85682308-9ae0-4ead-921a-f01f1ad71ded,1000013607,1000013612,93851f4e-482d-465f-bc7a-134e922919b3,1000006474,1000006475,1000006476,1000006477,1000006478,10734,22745,1000006479,1000006480,1000006481,1000006482,1000006483,16899,16911,1000003515,39075,39078,39069,39072,302ade26-2d89-4ca4-b45e-2d46fb1d4fa5,72f07896-3198-4950-ab93-42799858df2f,ce659998-fd1e-49f7-bea1-7c10be6333fc,1000013686,1000013687,43607,1000003660,9a6fe7f3-4840-4892-9194-fff3ceaf9a35,86f678f8-004a-4fdc-9f13-7af3faaa0389,582e16f2-29c6-402a-81c7-dcbfc01955b8,35466a32-9a30-4c14-b533-b5a5c2e2d5ae,8bd7e9c1-ab3b-48ed-ac75-43b585b8e48b,1000005118,1000014116,1000004906,1000004904,36878,36881,d4952770-4beb-489b-b222-4bb98e016d77,1000010150,07bd3eaa-c9d1-43da-9e59-f1a0e88b32a6,1000000207,27324,1000009196,16893,1000001259,1000001742,1000001497,1000001956,1000001955,16908,22824,4f9dd9b4-f730-48fb-948e-1dbf693e7f03,5630fde7-f994-42c7-b222-65d178415f9c,1b3accfc-30b1-41a2-befe-dc0d03b95617,9d017703-a19a-47a5-8890-23924e34e250,16905,10752,4da9e09d-7742-4d6a-9c9c-403290fdcfde,893f72c3-d778-40a2-8310-0f4ff38ded7c,46d3506e-b02c-434d-b0a9-1ba9ca6bae6b,22443,10740,10743,10746,10731,10749,10728,10755,10737,10758,1000006484,1000006485,1000006486,1000010989,1000006487,1000011057,1000006488,1000010943,1000011058,1000006489,1000006490,1000006491,1000006492,1000010942,1000006493,1000010941,10764,db5d19a4-68c7-4465-83f1-119a097e6a66,956a1839-4f5a-44a7-bec3-80ee00ce52b0,f2771d4e-ad8a-4c52-8a9b-119afffe5e2a,aae3ef7b-24b3-46e4-9d66-a80ad02cf375,b840847a-dd13-49f8-8ded-1a9b468aec95,938a42d7-cc5a-496f-a4f1-e79a1bd5c83f,d4bc9b8c-93e3-4567-8fda-6008211cef78,89449653-7cbf-47d1-9547-2445212d586f,2f9db83a-0d55-4cdb-92c3-7b955f83a2ce,117fb064-3eeb-40df-b22b-1266610647cb,a55381e8-1a44-48a3-ac75-e5a56c4bd313,4bd6c0c0-e7d4-427c-b8d9-fbc1fcf9a82b,86c572e1-ade4-4ba0-9b7d-a16394bf094c,42a1c325-afbd-4f46-9dfa-d28fecc87013,e62189f1-dcbe-481a-943b-093a3d55b686,daed5897-afd5-41b8-9e20-5a7108009ee2,1cae445e-85a9-4a51-9c0e-9eb6840c6c89,95ec4690-29fc-46fa-b44a-1c1d7ca1e32a,2e66457e-4afe-4f9a-9b72-510d0f655fc5,4bbf2b13-44ce-4f20-bd79-9ce736c70074,ab5a110e-202b-4a5e-9ef0-1fcfdae9ccd4,fa6c9df3-4047-47cb-b2e1-f219fe28d27e,9005646f-6ff2-4ce8-9b0c-665beaec8626,13b94cf0-e1a7-49f7-852d-2eda5300b48a,ff059dc5-171e-4ba5-b526-7270ab581b00,57f90ec8-9448-485a-96a8-157311da19a8,76c62599-35fd-4420-95f9-9da6e4018653,5acf9fde-288e-4c93-ac94-56ab14930f45,93604c61-3fa9-4a47-8502-82efcc323a6f,be734862-6a3a-4ffe-b657-0034eec51b15,bf0270b3-7661-4a8c-b53a-22f8840512e7,7322d08b-00b4-43b3-8ac3-4088ed4b4f89,72596226-944a-46fb-9055-4b5fbff95d79,698825e2-19ec-4e0c-9a20-9f251ae1aafb,ece48702-b84d-4f1c-b3f3-71bce79dd787,47141bd6-a875-4247-a041-8bc27cd50397,99f3dbf5-6391-4a7d-b415-2aa287befa1c,51796650-b51d-4363-87c2-16507c0a294c,15e1e572-caf9-4681-a6d2-7ce118d0296d,cb61790b-c86a-4dd3-9a4b-126b1e87767f,e30ec51a-d794-40b2-be0f-ae05bc4fec32,29ed0234-3c3e-453b-8fd5-b1e2d4502fd4,8bebb49e-59f6-4c2b-a66b-7eae16a640b0,120856e0-51db-45fb-a9e2-b2b7703b8c32,fc7da491-df0a-4a92-8764-ba4d230e309c,15c6180b-de2b-436d-8927-ccab9b4a6ff1,d9f34748-4bab-45d8-a249-1a89bfb9c4d4,dcaea5e1-43c7-421a-8d4a-22396449f6f8,26165724-b857-4f45-9a57-c50ab5dfcacb,0498ddbf-8f84-4cc4-8076-fa02d61b8202,fa71a9fc-3272-4fca-b8f6-70481f4eecc9,56c5bda4-68ab-40a2-ac17-36d8567218de,d8cb7500-fc26-4d97-a679-6f597fd11454,bf6a6200-bd5e-4a5d-b221-8b493cc83d15,58801294-398b-4e86-97f8-076f67df01b3,ab8d1610-a21c-444f-9b20-10492cc1bbf3,7584a644-cde9-4798-8d47-12a253d1d76d,12d8cfe1-2bf2-491d-8c59-d46c543cbadb,20227cd4-af2b-4666-8892-8af1d7147955,bf07e4c2-1469-4d80-af9c-3ea85fe8b63b,6b2535d6-4143-4b87-a64b-2b921b21c16f,34eafa1b-6dbd-4aae-8429-32cf248b1f21,420b3954-cb42-4643-aca3-df53cf8e6107,8c0ff71a-705f-4485-b1db-bea3ed652859,a4de3835-8b49-47e6-abb7-3d338f690769,6a6d941e-8201-430f-a1a4-651bfcf3d06b,98f697e9-f4bb-42eb-91f7-8073f0beea3e,9b416b7a-72e3-4c23-8b97-d4ed300e5e00,7864f20f-6340-4751-a430-478a9ea87fa5,a40dac17-e71e-4021-8360-7ad8de1e8364,d99235a3-6812-4f14-9ab7-105c57e4e4aa,a1c7b761-3985-4976-9c3c-81ac85403c07,004aa34d-751a-4da0-8293-9947171ce721,f35e9569-f7a4-4742-a69c-62e708341e4f,f082660a-6eab-433c-b899-d4805a83e51c,3f917f45-2abb-431a-b5b7-d7b7e1f2c1c5,2da29296-11c5-4444-9517-cf447ffe4c40,8bdbd0eb-233a-402e-b5e7-43aa1a3f5895,deeefc0c-5fb6-49aa-b2c7-f3d0ed7353bf,df18d991-c019-4df6-93ea-d0bddcdad022,abe91bac-3fa4-488c-9ec6-47353b7f7339,93d4af0d-9b56-436a-9db7-0eaf14bba959,f7921982-7377-4da4-b413-509402350a18,6dbbc217-1cd3-4e0d-a66b-164fd15773db,60a8bd78-a5d8-4965-a3a8-eb6a8d332f82,aca7528b-e61d-4ede-bcd8-6c2cd7ef4c05,7a7d4203-becf-49f8-bdcb-82f2224305ec,a61273f1-a4ac-49de-8080-595cdc25d264,5b49413f-244e-408d-b79d-16b9393c6365,688163d9-730f-49ac-8ad6-e588db9e0a30,59ba6efd-5fc4-4460-a02b-1bbdbbe0c4ed,48ed3264-7be6-4b7d-a6c7-3e95ea5e1394,d34809f6-3e8f-4533-bed7-e039fa2a8635,8315f8a4-61b7-4f0c-b3de-a6e382efa58e,2663333e-8a9b-4478-bf71-502bae05c63c,bcde8fc8-353b-43de-b0a8-a31f2d21fe4b,53cd2512-0e19-4c22-809b-c0d01d08e3bb,81bf7a32-13dd-48c1-a8b9-9d392cec94b5,c2fd7d15-7ef0-456e-8e26-4ab3f5dfb715,9cef8529-4e66-4ae8-838b-23ee1b4e3e74,7c4f4239-8ed9-46ea-b5c8-e06013c5e19e,cd8c2a71-4bb3-48ca-8f64-39aba9e163ee,d8d3e54d-d000-4fbf-8ad2-d6b9aa6245f7,7cbada96-0fcf-46a2-b1a7-a8e8a088fbc0,ea293290-dcef-4934-b2b8-5394034daf04,d7124ab9-6e79-439c-b017-73fa0f7f81a2,c764402b-9d33-411f-8609-2349f8c9760a,4dc9b5c1-e0a2-4555-b0b1-9e2326d67761,ba6adecc-7e94-4bbb-8d16-8345d3f11c1b,f846b600-7703-4119-994a-aa271be92009,3499be5d-5a91-407e-9078-5ad3ffe561d6,5d7f5fa4-fc21-4db3-b61e-2c9f32d502fd,46ced242-8103-44ee-b416-1b222debff5c,5f740ee1-4dfe-4ffc-a1f3-e9c6d7e418ea,fda3f10f-666a-4524-be16-d40ddc783440,92dde998-5356-42f0-ada5-1c6a690c42c3,1eaf6f07-3e2c-4d08-b970-a59d4e99698a,1737c989-1bbe-414b-a0bf-543c3870f0d6,2999a9bc-9f2b-43ca-a1ad-e6b942dd2cee,76b08cef-2624-46de-af24-68eb0c007469,81a29621-38e7-4117-bcbe-80c5a05d906c,7a4f876c-5da3-42e7-8c9d-efc8401955f4,e1808b58-0403-4a6f-aa29-a9cd3900a28a";
        Set<String> list = new HashSet<>(Arrays.asList(abc.split(",")));
        Set<String> list1 = new HashSet<>(Arrays.asList(bca.trim().split(",")));
        System.out.println(abc);
        System.out.println(list1.size());

        List<String> deletedDatamodelIds = list1.stream()
                .filter(element -> !list.contains(element))
                .distinct() // Optional: To remove duplicates
                .collect(Collectors.toList());
        System.out.println(deletedDatamodelIds);

        List<String> a = Arrays.asList("1", "2", "3", "4", "5");
        List<String> b = Arrays.asList("2", "2", "3", "4", "6");
        Set<String> c = new HashSet<>(a);
        c.addAll(b);

        // Find elements in 'b' that are not in 'a'
        List<String> notInB = a.stream()
                .filter(element -> !b.contains(element))
                .distinct() // Optional: To remove duplicates
                .collect(Collectors.toList());

        System.out.println("Elements in 'b' but not in 'a': " + notInB);
        System.out.println(c);


    }

    private static JSONObject compareJson(String source, String target) {
        JSONObject finalRes = new JSONObject();
        JSONObject sourceDif = new JSONObject();
        JSONObject targetDif = new JSONObject();

        Gson g = new Gson();
        Type mapType = new TypeToken<Map<String, Object>>() {
        }.getType();
        Map<String, Object> firstMap = g.fromJson(source, mapType);
        Map<String, Object> secondMap = g.fromJson(target, mapType);
        MapDifference<String, Object> mapDifference = Maps.difference(firstMap, secondMap);
        mapDifference.entriesDiffering().forEach((key, value) -> {
            try {
                System.out.println("Source: " + key + " : " + value.leftValue());
                sourceDif.put(key, String.valueOf(value.leftValue()));
                targetDif.put(key, String.valueOf(value.rightValue()));
            } catch (JSONException e) {
                e.printStackTrace();
            }
        });
        finalRes.put("source", sourceDif);
        finalRes.put("target", targetDif);
        return finalRes;
    }
}
